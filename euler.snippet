<?xml version="1.0" encoding="utf-8"?>
<CodeSnippets xmlns="http://schemas.microsoft.com/VisualStudio/2005/CodeSnippet">
    <CodeSnippet Format="1.0.0">
        <Header>
            <Title>euler</Title>
            <Shortcut>euler</Shortcut>
        </Header>
        <Snippet>
            <Code Language="CPP">
                <![CDATA[
namespace UndirectedGraph {
  struct Edge {
    int to, nxt;
  } E[maxn];
  int ecnt = 1, head[maxn], vis[maxn];
  
  void adde(int u, int v) {
    E[++ecnt] = { v, head[u] };
    head[u] = ecnt;
  }

  int n, m, deg[maxn], ans[maxn], tot;

  void dfs(int u) {
    for (int& i = head[u]; i; i = E[i].nxt) {
      if (vis[i / 2]) continue;
      vis[i / 2] = true;
      int id = (i / 2) * (i % 2 == 0 ? 1 : -1);
      int v = E[i].to;
      dfs(v);
      ans[++tot] = id;
    }
  }
  
  void solve() {
    read(n, m);
    for (int i = 1; i <= m; i++) {
      int u, v;
      read(u, v);
      deg[u]++;
      deg[v]++;
      adde(u, v);
      adde(v, u);
    }
    for (int i = 1; i <= n; i++) {
      if (deg[i] % 2 == 1) {
        puts("NO");
        return ;
      }
    }
    for (int i = 1; i <= n; i++) {
      if (head[i]) {
        dfs(i);
        break;
      }
    }
    if (tot == m) {
      puts("YES");
      for (int i = m; i >= 1; i--) {
        write(ans[i], " \n"[i == 1]);
      }
    } else {
      puts("NO");
    }
  }
}

namespace DirectedGraph {
  struct Edge {
    int to, nxt;
  } E[maxn];
  int ecnt, head[maxn], vis[maxn];
  void adde(int u, int v) {
    E[++ecnt] = { v, head[u] };
    head[u] = ecnt;
  }
  
  int n, m, ind[maxn], oud[maxn], ans[maxn], tot;

  void dfs(int u) {
    for (int& i = head[u]; i; i = E[i].nxt) {
      if (vis[i]) continue;
      vis[i] = true;
      int id = i;
      int v = E[i].to;
      dfs(v);
      ans[++tot] = id;
    }
  }

  void solve() {
    read(n, m);
    for (int i = 1; i <= m; i++) {
      int u, v;
      read(u, v);
      oud[u]++;
      ind[v]++;
      adde(u, v);
    }
    for (int i = 1; i <= n; i++) {
      if (ind[i] != oud[i]) {
        puts("NO");
        return ;
      }
    }
    for (int i = 1; i <= n; i++) {
      if (head[i]) {
        dfs(i);
        break;
      }
    }
    if (tot == m) {
      puts("YES");
      for (int i = m; i >= 1; i--) {
        write(ans[i], " \n"[i == 1]);
      }
    } else {
      puts("NO");
    }
  }
}
                ]]>
            </Code>
        </Snippet>
    </CodeSnippet>
</CodeSnippets>